@model JazMax.Web.ViewModel.Documents.UploadView
@using JazMax.Core.SystemHelpers

@{
    ViewBag.Title = "Create";
    JazMaxDropDownList drops = new JazMaxDropDownList();
}

<h2>Create</h2>

@using (Html.BeginForm("CreateForUser", "Documents", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>UploadView</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })



       


        <div class="form-group">
            @Html.LabelFor(model => model.CoreFileTypeId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">

                @Html.DropDownListFor(model => model.CoreFileTypeId, drops.GetAllFileTypes(), htmlAttributes: new { @class = "form-control", id = "d" })
                @Html.ValidationMessageFor(model => model.CoreFileTypeId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FileDescription, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.FileDescription, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FileDescription, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CoreFileCategoryId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.CoreFileCategoryId, drops.GetAllDocumentTypes(), htmlAttributes: new { @class = "form-control", id = "Chosen" })
                @Html.ValidationMessageFor(model => model.CoreFileCategoryId, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.IsActive, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FileContent, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <p><input multiple type="file" id="file" name="file" /></p>
                @Html.ValidationMessageFor(model => model.FileContent, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SentTo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.SentTo, drops.GetAllUserEmails(), htmlAttributes: new { @class = "form-control", id = "f" })
                @Html.ValidationMessageFor(model => model.SentTo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<link href="~/Content/Chosen/chosen.min.css" rel="stylesheet" />
<script src="~/Scripts/chosen.jquery.min.js"></script>
@section Scripts {
  <script>
      debugger;
      $(function () {
          $("#Chosen").chosen();
      });
  </script>

<script>
        debugger;
        $(function () {
            $("#d").chosen();
        });
</script>

<script>
        debugger;
        $(function () {
            $("#f").chosen();
        });
</script>
}

