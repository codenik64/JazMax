

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "JazMax.WebJob.Messenger\App.config"
//     Connection String Name: "JazMaxDBProdContextA"
//     Connection String:      "Data Source=ASH\SQLEXPRESS;initial catalog=JazMaxDBProd;integrated security=True;MultipleActiveResultSets=True;App=EntityFramework"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Express Edition (64-bit)
// Database Engine Edition: Express

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.5
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace JazMax.DataAccess
{
    using System.Linq;

    #region Unit of work

    public interface IJazMaxDBProdContext : System.IDisposable
    {
        System.Data.Entity.DbSet<AspNetRole> AspNetRoles { get; set; } // AspNetRoles
        System.Data.Entity.DbSet<AspNetUser> AspNetUsers { get; set; } // AspNetUsers
        System.Data.Entity.DbSet<AspNetUserClaim> AspNetUserClaims { get; set; } // AspNetUserClaims
        System.Data.Entity.DbSet<AspNetUserLogin> AspNetUserLogins { get; set; } // AspNetUserLogins
        System.Data.Entity.DbSet<AspNetUserRole> AspNetUserRoles { get; set; } // AspNetUserRoles
        System.Data.Entity.DbSet<AzureWebJob> AzureWebJobs { get; set; } // AzureWebJob
        System.Data.Entity.DbSet<AzureWebJobLog> AzureWebJobLogs { get; set; } // AzureWebJobLog
        System.Data.Entity.DbSet<BlobCoreStorage> BlobCoreStorages { get; set; } // BlobCoreStorage
        System.Data.Entity.DbSet<CoreAgent> CoreAgents { get; set; } // CoreAgent
        System.Data.Entity.DbSet<CoreBranch> CoreBranches { get; set; } // CoreBranch
        System.Data.Entity.DbSet<CorePa> CorePas { get; set; } // CorePA
        System.Data.Entity.DbSet<CoreProvince> CoreProvinces { get; set; } // CoreProvince
        System.Data.Entity.DbSet<CoreTeamLeader> CoreTeamLeaders { get; set; } // CoreTeamLeader
        System.Data.Entity.DbSet<CoreUser> CoreUsers { get; set; } // CoreUser
        System.Data.Entity.DbSet<CoreUserInType> CoreUserInTypes { get; set; } // CoreUserInType
        System.Data.Entity.DbSet<CoreUserType> CoreUserTypes { get; set; } // CoreUserType
        System.Data.Entity.DbSet<MessengerCoreLog> MessengerCoreLogs { get; set; } // MessengerCoreLog
        System.Data.Entity.DbSet<MessengerType> MessengerTypes { get; set; } // MessengerType
        System.Data.Entity.DbSet<PropertyFeature> PropertyFeatures { get; set; } // PropertyFeature
        System.Data.Entity.DbSet<PropertyImage> PropertyImages { get; set; } // PropertyImages
        System.Data.Entity.DbSet<PropertyListing> PropertyListings { get; set; } // PropertyListing
        System.Data.Entity.DbSet<PropertyListingAgent> PropertyListingAgents { get; set; } // PropertyListingAgents
        System.Data.Entity.DbSet<PropertyListingDetail> PropertyListingDetails { get; set; } // PropertyListingDetail
        System.Data.Entity.DbSet<PropertyType> PropertyTypes { get; set; } // PropertyType
        System.Data.Entity.DbSet<ProprtyListingFeature> ProprtyListingFeatures { get; set; } // ProprtyListingFeatures
        System.Data.Entity.DbSet<ProprtyListingYoutubeLibrary> ProprtyListingYoutubeLibraries { get; set; } // ProprtyListingYoutubeLibrary
        System.Data.Entity.DbSet<SystemEditLog> SystemEditLogs { get; set; } // SystemEditLog
        System.Data.Entity.DbSet<SystemErrorLog> SystemErrorLogs { get; set; } // SystemErrorLog
        System.Data.Entity.DbSet<SystemSettingsData> SystemSettingsDatas { get; set; } // SystemSettingsData
        System.Data.Entity.DbSet<VwGetAgentsInformation> VwGetAgentsInformations { get; set; } // vw_GetAgentsInformation
        System.Data.Entity.DbSet<VwGetTeamLeadersInformation> VwGetTeamLeadersInformations { get; set; } // vw_GetTeamLeadersInformation

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
        System.Data.Entity.DbSet Set(System.Type entityType);
        System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();

        // Stored Procedures
        int SpSaveEditLog(string tableName, string tableColum, int? tableKey, string valueBefore, string valueAfer, int? coreUserId, string comment);
        // SpSaveEditLogAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class JazMaxDBProdContext : System.Data.Entity.DbContext, IJazMaxDBProdContext
    {
        public System.Data.Entity.DbSet<AspNetRole> AspNetRoles { get; set; } // AspNetRoles
        public System.Data.Entity.DbSet<AspNetUser> AspNetUsers { get; set; } // AspNetUsers
        public System.Data.Entity.DbSet<AspNetUserClaim> AspNetUserClaims { get; set; } // AspNetUserClaims
        public System.Data.Entity.DbSet<AspNetUserLogin> AspNetUserLogins { get; set; } // AspNetUserLogins
        public System.Data.Entity.DbSet<AspNetUserRole> AspNetUserRoles { get; set; } // AspNetUserRoles
        public System.Data.Entity.DbSet<AzureWebJob> AzureWebJobs { get; set; } // AzureWebJob
        public System.Data.Entity.DbSet<AzureWebJobLog> AzureWebJobLogs { get; set; } // AzureWebJobLog
        public System.Data.Entity.DbSet<BlobCoreStorage> BlobCoreStorages { get; set; } // BlobCoreStorage
        public System.Data.Entity.DbSet<CoreAgent> CoreAgents { get; set; } // CoreAgent
        public System.Data.Entity.DbSet<CoreBranch> CoreBranches { get; set; } // CoreBranch
        public System.Data.Entity.DbSet<CorePa> CorePas { get; set; } // CorePA
        public System.Data.Entity.DbSet<CoreProvince> CoreProvinces { get; set; } // CoreProvince
        public System.Data.Entity.DbSet<CoreTeamLeader> CoreTeamLeaders { get; set; } // CoreTeamLeader
        public System.Data.Entity.DbSet<CoreUser> CoreUsers { get; set; } // CoreUser
        public System.Data.Entity.DbSet<CoreUserInType> CoreUserInTypes { get; set; } // CoreUserInType
        public System.Data.Entity.DbSet<CoreUserType> CoreUserTypes { get; set; } // CoreUserType
        public System.Data.Entity.DbSet<MessengerCoreLog> MessengerCoreLogs { get; set; } // MessengerCoreLog
        public System.Data.Entity.DbSet<MessengerType> MessengerTypes { get; set; } // MessengerType
        public System.Data.Entity.DbSet<PropertyFeature> PropertyFeatures { get; set; } // PropertyFeature
        public System.Data.Entity.DbSet<PropertyImage> PropertyImages { get; set; } // PropertyImages
        public System.Data.Entity.DbSet<PropertyListing> PropertyListings { get; set; } // PropertyListing
        public System.Data.Entity.DbSet<PropertyListingAgent> PropertyListingAgents { get; set; } // PropertyListingAgents
        public System.Data.Entity.DbSet<PropertyListingDetail> PropertyListingDetails { get; set; } // PropertyListingDetail
        public System.Data.Entity.DbSet<PropertyType> PropertyTypes { get; set; } // PropertyType
        public System.Data.Entity.DbSet<ProprtyListingFeature> ProprtyListingFeatures { get; set; } // ProprtyListingFeatures
        public System.Data.Entity.DbSet<ProprtyListingYoutubeLibrary> ProprtyListingYoutubeLibraries { get; set; } // ProprtyListingYoutubeLibrary
        public System.Data.Entity.DbSet<SystemEditLog> SystemEditLogs { get; set; } // SystemEditLog
        public System.Data.Entity.DbSet<SystemErrorLog> SystemErrorLogs { get; set; } // SystemErrorLog
        public System.Data.Entity.DbSet<SystemSettingsData> SystemSettingsDatas { get; set; } // SystemSettingsData
        public System.Data.Entity.DbSet<VwGetAgentsInformation> VwGetAgentsInformations { get; set; } // vw_GetAgentsInformation
        public System.Data.Entity.DbSet<VwGetTeamLeadersInformation> VwGetTeamLeadersInformations { get; set; } // vw_GetTeamLeadersInformation

        static JazMaxDBProdContext()
        {
            System.Data.Entity.Database.SetInitializer<JazMaxDBProdContext>(null);
        }

        public JazMaxDBProdContext()
            : base("Name=JazMaxDBProdContextA")
        {
        }

        public JazMaxDBProdContext(string connectionString)
            : base(connectionString)
        {
        }

        public JazMaxDBProdContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public JazMaxDBProdContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public JazMaxDBProdContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new AspNetRoleConfiguration());
            modelBuilder.Configurations.Add(new AspNetUserConfiguration());
            modelBuilder.Configurations.Add(new AspNetUserClaimConfiguration());
            modelBuilder.Configurations.Add(new AspNetUserLoginConfiguration());
            modelBuilder.Configurations.Add(new AspNetUserRoleConfiguration());
            modelBuilder.Configurations.Add(new AzureWebJobConfiguration());
            modelBuilder.Configurations.Add(new AzureWebJobLogConfiguration());
            modelBuilder.Configurations.Add(new BlobCoreStorageConfiguration());
            modelBuilder.Configurations.Add(new CoreAgentConfiguration());
            modelBuilder.Configurations.Add(new CoreBranchConfiguration());
            modelBuilder.Configurations.Add(new CorePaConfiguration());
            modelBuilder.Configurations.Add(new CoreProvinceConfiguration());
            modelBuilder.Configurations.Add(new CoreTeamLeaderConfiguration());
            modelBuilder.Configurations.Add(new CoreUserConfiguration());
            modelBuilder.Configurations.Add(new CoreUserInTypeConfiguration());
            modelBuilder.Configurations.Add(new CoreUserTypeConfiguration());
            modelBuilder.Configurations.Add(new MessengerCoreLogConfiguration());
            modelBuilder.Configurations.Add(new MessengerTypeConfiguration());
            modelBuilder.Configurations.Add(new PropertyFeatureConfiguration());
            modelBuilder.Configurations.Add(new PropertyImageConfiguration());
            modelBuilder.Configurations.Add(new PropertyListingConfiguration());
            modelBuilder.Configurations.Add(new PropertyListingAgentConfiguration());
            modelBuilder.Configurations.Add(new PropertyListingDetailConfiguration());
            modelBuilder.Configurations.Add(new PropertyTypeConfiguration());
            modelBuilder.Configurations.Add(new ProprtyListingFeatureConfiguration());
            modelBuilder.Configurations.Add(new ProprtyListingYoutubeLibraryConfiguration());
            modelBuilder.Configurations.Add(new SystemEditLogConfiguration());
            modelBuilder.Configurations.Add(new SystemErrorLogConfiguration());
            modelBuilder.Configurations.Add(new SystemSettingsDataConfiguration());
            modelBuilder.Configurations.Add(new VwGetAgentsInformationConfiguration());
            modelBuilder.Configurations.Add(new VwGetTeamLeadersInformationConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new AspNetRoleConfiguration(schema));
            modelBuilder.Configurations.Add(new AspNetUserConfiguration(schema));
            modelBuilder.Configurations.Add(new AspNetUserClaimConfiguration(schema));
            modelBuilder.Configurations.Add(new AspNetUserLoginConfiguration(schema));
            modelBuilder.Configurations.Add(new AspNetUserRoleConfiguration(schema));
            modelBuilder.Configurations.Add(new AzureWebJobConfiguration(schema));
            modelBuilder.Configurations.Add(new AzureWebJobLogConfiguration(schema));
            modelBuilder.Configurations.Add(new BlobCoreStorageConfiguration(schema));
            modelBuilder.Configurations.Add(new CoreAgentConfiguration(schema));
            modelBuilder.Configurations.Add(new CoreBranchConfiguration(schema));
            modelBuilder.Configurations.Add(new CorePaConfiguration(schema));
            modelBuilder.Configurations.Add(new CoreProvinceConfiguration(schema));
            modelBuilder.Configurations.Add(new CoreTeamLeaderConfiguration(schema));
            modelBuilder.Configurations.Add(new CoreUserConfiguration(schema));
            modelBuilder.Configurations.Add(new CoreUserInTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new CoreUserTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new MessengerCoreLogConfiguration(schema));
            modelBuilder.Configurations.Add(new MessengerTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new PropertyFeatureConfiguration(schema));
            modelBuilder.Configurations.Add(new PropertyImageConfiguration(schema));
            modelBuilder.Configurations.Add(new PropertyListingConfiguration(schema));
            modelBuilder.Configurations.Add(new PropertyListingAgentConfiguration(schema));
            modelBuilder.Configurations.Add(new PropertyListingDetailConfiguration(schema));
            modelBuilder.Configurations.Add(new PropertyTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new ProprtyListingFeatureConfiguration(schema));
            modelBuilder.Configurations.Add(new ProprtyListingYoutubeLibraryConfiguration(schema));
            modelBuilder.Configurations.Add(new SystemEditLogConfiguration(schema));
            modelBuilder.Configurations.Add(new SystemErrorLogConfiguration(schema));
            modelBuilder.Configurations.Add(new SystemSettingsDataConfiguration(schema));
            modelBuilder.Configurations.Add(new VwGetAgentsInformationConfiguration(schema));
            modelBuilder.Configurations.Add(new VwGetTeamLeadersInformationConfiguration(schema));
            return modelBuilder;
        }

        // Stored Procedures
        public int SpSaveEditLog(string tableName, string tableColum, int? tableKey, string valueBefore, string valueAfer, int? coreUserId, string comment)
        {
            var tableNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@tableName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = tableName, Size = 50 };
            if (tableNameParam.Value == null)
                tableNameParam.Value = System.DBNull.Value;

            var tableColumParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@tableColum", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = tableColum, Size = 50 };
            if (tableColumParam.Value == null)
                tableColumParam.Value = System.DBNull.Value;

            var tableKeyParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@tableKey", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = tableKey.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tableKey.HasValue)
                tableKeyParam.Value = System.DBNull.Value;

            var valueBeforeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@valueBefore", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = valueBefore, Size = 50 };
            if (valueBeforeParam.Value == null)
                valueBeforeParam.Value = System.DBNull.Value;

            var valueAferParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@valueAfer", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = valueAfer, Size = 50 };
            if (valueAferParam.Value == null)
                valueAferParam.Value = System.DBNull.Value;

            var coreUserIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@coreUserId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = coreUserId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!coreUserId.HasValue)
                coreUserIdParam.Value = System.DBNull.Value;

            var commentParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Comment", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = comment, Size = 50 };
            if (commentParam.Value == null)
                commentParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[SPSaveEditLog] @tableName, @tableColum, @tableKey, @valueBefore, @valueAfer, @coreUserId, @Comment", tableNameParam, tableColumParam, tableKeyParam, valueBeforeParam, valueAferParam, coreUserIdParam, commentParam, procResultParam);

            return (int) procResultParam.Value;
        }

    }
    #endregion

    #region Database context factory

    public class JazMaxDBProdContextFactory : System.Data.Entity.Infrastructure.IDbContextFactory<JazMaxDBProdContext>
    {
        public JazMaxDBProdContext Create()
        {
            return new JazMaxDBProdContext();
        }
    }

    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class FakeJazMaxDBProdContext : IJazMaxDBProdContext
    {
        public System.Data.Entity.DbSet<AspNetRole> AspNetRoles { get; set; }
        public System.Data.Entity.DbSet<AspNetUser> AspNetUsers { get; set; }
        public System.Data.Entity.DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public System.Data.Entity.DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public System.Data.Entity.DbSet<AspNetUserRole> AspNetUserRoles { get; set; }
        public System.Data.Entity.DbSet<AzureWebJob> AzureWebJobs { get; set; }
        public System.Data.Entity.DbSet<AzureWebJobLog> AzureWebJobLogs { get; set; }
        public System.Data.Entity.DbSet<BlobCoreStorage> BlobCoreStorages { get; set; }
        public System.Data.Entity.DbSet<CoreAgent> CoreAgents { get; set; }
        public System.Data.Entity.DbSet<CoreBranch> CoreBranches { get; set; }
        public System.Data.Entity.DbSet<CorePa> CorePas { get; set; }
        public System.Data.Entity.DbSet<CoreProvince> CoreProvinces { get; set; }
        public System.Data.Entity.DbSet<CoreTeamLeader> CoreTeamLeaders { get; set; }
        public System.Data.Entity.DbSet<CoreUser> CoreUsers { get; set; }
        public System.Data.Entity.DbSet<CoreUserInType> CoreUserInTypes { get; set; }
        public System.Data.Entity.DbSet<CoreUserType> CoreUserTypes { get; set; }
        public System.Data.Entity.DbSet<MessengerCoreLog> MessengerCoreLogs { get; set; }
        public System.Data.Entity.DbSet<MessengerType> MessengerTypes { get; set; }
        public System.Data.Entity.DbSet<PropertyFeature> PropertyFeatures { get; set; }
        public System.Data.Entity.DbSet<PropertyImage> PropertyImages { get; set; }
        public System.Data.Entity.DbSet<PropertyListing> PropertyListings { get; set; }
        public System.Data.Entity.DbSet<PropertyListingAgent> PropertyListingAgents { get; set; }
        public System.Data.Entity.DbSet<PropertyListingDetail> PropertyListingDetails { get; set; }
        public System.Data.Entity.DbSet<PropertyType> PropertyTypes { get; set; }
        public System.Data.Entity.DbSet<ProprtyListingFeature> ProprtyListingFeatures { get; set; }
        public System.Data.Entity.DbSet<ProprtyListingYoutubeLibrary> ProprtyListingYoutubeLibraries { get; set; }
        public System.Data.Entity.DbSet<SystemEditLog> SystemEditLogs { get; set; }
        public System.Data.Entity.DbSet<SystemErrorLog> SystemErrorLogs { get; set; }
        public System.Data.Entity.DbSet<SystemSettingsData> SystemSettingsDatas { get; set; }
        public System.Data.Entity.DbSet<VwGetAgentsInformation> VwGetAgentsInformations { get; set; }
        public System.Data.Entity.DbSet<VwGetTeamLeadersInformation> VwGetTeamLeadersInformations { get; set; }

        public FakeJazMaxDBProdContext()
        {
            AspNetRoles = new FakeDbSet<AspNetRole>("Id");
            AspNetUsers = new FakeDbSet<AspNetUser>("Id");
            AspNetUserClaims = new FakeDbSet<AspNetUserClaim>("Id");
            AspNetUserLogins = new FakeDbSet<AspNetUserLogin>("LoginProvider", "ProviderKey", "UserId");
            AspNetUserRoles = new FakeDbSet<AspNetUserRole>("UserId", "RoleId");
            AzureWebJobs = new FakeDbSet<AzureWebJob>("AzureWebJobId");
            AzureWebJobLogs = new FakeDbSet<AzureWebJobLog>("AzureWebJobLogId");
            BlobCoreStorages = new FakeDbSet<BlobCoreStorage>("BlobId");
            CoreAgents = new FakeDbSet<CoreAgent>("CoreAgentId");
            CoreBranches = new FakeDbSet<CoreBranch>("BranchId");
            CorePas = new FakeDbSet<CorePa>("CorePaId");
            CoreProvinces = new FakeDbSet<CoreProvince>("ProvinceId");
            CoreTeamLeaders = new FakeDbSet<CoreTeamLeader>("CoreTeamLeaderId");
            CoreUsers = new FakeDbSet<CoreUser>("CoreUserId");
            CoreUserInTypes = new FakeDbSet<CoreUserInType>("CoreUserInTypeId");
            CoreUserTypes = new FakeDbSet<CoreUserType>("CoreUserTypeId");
            MessengerCoreLogs = new FakeDbSet<MessengerCoreLog>("MessengerCoreLogId");
            MessengerTypes = new FakeDbSet<MessengerType>("MessengerTypeId");
            PropertyFeatures = new FakeDbSet<PropertyFeature>("PropertyFeatureId", "FeatureName", "IsFeatureActive");
            PropertyImages = new FakeDbSet<PropertyImage>("PropertyImagesId");
            PropertyListings = new FakeDbSet<PropertyListing>("PropertyListingId");
            PropertyListingAgents = new FakeDbSet<PropertyListingAgent>("PropertyListingAgentsId");
            PropertyListingDetails = new FakeDbSet<PropertyListingDetail>("PropertyListingDetailId", "PropertyListingId");
            PropertyTypes = new FakeDbSet<PropertyType>("PropertyTypeId", "TypeName", "IsActive");
            ProprtyListingFeatures = new FakeDbSet<ProprtyListingFeature>("ProprtyListingFeaturesId", "PropertyFeatureId", "PropertyListingId", "IsFeatureActive");
            ProprtyListingYoutubeLibraries = new FakeDbSet<ProprtyListingYoutubeLibrary>("ProprtyListingYoutubeLibraryId", "PrfoprtyListingId", "YoutubeVideoLink", "IsVideoActive");
            SystemEditLogs = new FakeDbSet<SystemEditLog>("SystemEditLogId");
            SystemErrorLogs = new FakeDbSet<SystemErrorLog>("SystemErrorLogId");
            SystemSettingsDatas = new FakeDbSet<SystemSettingsData>("SystemSettingsDataId");
            VwGetAgentsInformations = new FakeDbSet<VwGetAgentsInformation>("CoreUserId", "CoreAgentId", "BranchId", "ProvinceId");
            VwGetTeamLeadersInformations = new FakeDbSet<VwGetTeamLeadersInformation>("CoreUserId", "CoreTeamLeaderId", "BranchId", "ProvinceId");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        private System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        private System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }


        // Stored Procedures
        public int SpSaveEditLog(string tableName, string tableColum, int? tableKey, string valueBefore, string valueAfer, int? coreUserId, string comment)
        {

            return 0;
        }

    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TElement>(expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // AspNetRoles
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class AspNetRole
    {
        public string Id { get; set; } // Id (Primary key) (length: 128)
        public string Name { get; set; } // Name (length: 256)
    }

    // AspNetUsers
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class AspNetUser
    {
        public string Id { get; set; } // Id (Primary key) (length: 128)
        public string Email { get; set; } // Email (length: 256)
        public bool EmailConfirmed { get; set; } // EmailConfirmed
        public string PasswordHash { get; set; } // PasswordHash
        public string SecurityStamp { get; set; } // SecurityStamp
        public string PhoneNumber { get; set; } // PhoneNumber
        public bool PhoneNumberConfirmed { get; set; } // PhoneNumberConfirmed
        public bool TwoFactorEnabled { get; set; } // TwoFactorEnabled
        public System.DateTime? LockoutEndDateUtc { get; set; } // LockoutEndDateUtc
        public bool LockoutEnabled { get; set; } // LockoutEnabled
        public int AccessFailedCount { get; set; } // AccessFailedCount
        public string UserName { get; set; } // UserName (length: 256)
    }

    // AspNetUserClaims
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class AspNetUserClaim
    {
        public int Id { get; set; } // Id (Primary key)
        public string UserId { get; set; } // UserId (length: 128)
        public string ClaimType { get; set; } // ClaimType
        public string ClaimValue { get; set; } // ClaimValue
    }

    // AspNetUserLogins
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class AspNetUserLogin
    {
        public string LoginProvider { get; set; } // LoginProvider (Primary key) (length: 128)
        public string ProviderKey { get; set; } // ProviderKey (Primary key) (length: 128)
        public string UserId { get; set; } // UserId (Primary key) (length: 128)
    }

    // AspNetUserRoles
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class AspNetUserRole
    {
        public string UserId { get; set; } // UserId (Primary key) (length: 128)
        public string RoleId { get; set; } // RoleId (Primary key) (length: 128)
    }

    // AzureWebJob
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class AzureWebJob
    {
        public int AzureWebJobId { get; set; } // AzureWebJobId (Primary key)
        public string WebJobName { get; set; } // WebJobName (length: 100)
    }

    // AzureWebJobLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class AzureWebJobLog
    {
        public int AzureWebJobLogId { get; set; } // AzureWebJobLogId (Primary key)
        public string AzureWebJobId { get; set; } // AzureWebJobId (length: 100)
        public System.DateTime StartDateTime { get; set; } // StartDateTime
        public System.DateTime EndDateTime { get; set; } // EndDateTime
        public string RecordsAffected { get; set; } // RecordsAffected (length: 1)
    }

    // BlobCoreStorage
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class BlobCoreStorage
    {
        public int BlobId { get; set; } // BlobId (Primary key)
        public string BlobType { get; set; } // BlobType (length: 100)
        public string BlobFileType { get; set; } // BlobFileType (length: 100)
        public string BlobFileName { get; set; } // BlobFileName
        public string BlobFileExtension { get; set; } // BlobFileExtension
        public int BlobFileSize { get; set; } // BlobFileSize
        public string BlobUrl { get; set; } // BlobUrl
        public bool IsActive { get; set; } // IsActive
    }

    // CoreAgent
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class CoreAgent
    {
        public int CoreAgentId { get; set; } // CoreAgentId (Primary key)
        public int? CoreBranchId { get; set; } // CoreBranchId
        public int? CoreUserId { get; set; } // CoreUserId
        public bool? IsActive { get; set; } // IsActive
    }

    // CoreBranch
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class CoreBranch
    {
        public int BranchId { get; set; } // BranchId (Primary key)
        public int? CoreTeamLeaderId { get; set; } // CoreTeamLeaderId
        public int? ProvinceId { get; set; } // ProvinceId
        public bool? IsActive { get; set; } // IsActive
        public string BranchName { get; set; } // BranchName
        public string Phone { get; set; } // Phone (length: 10)
        public string EmailAddress { get; set; } // EmailAddress
        public string StreetAddress { get; set; } // StreetAddress
        public string City { get; set; } // City
        public string Suburb { get; set; } // Suburb
    }

    // CorePA
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class CorePa
    {
        public int CorePaId { get; set; } // CorePAId (Primary key)
        public int? CoreUserId { get; set; } // CoreUserId
        public int? ProvinceId { get; set; } // ProvinceId
        public bool? IsActive { get; set; } // IsActive
    }

    // CoreProvince
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class CoreProvince
    {
        public int ProvinceId { get; set; } // ProvinceId (Primary key)
        public string ProvinceName { get; set; } // ProvinceName
        public bool? IsAssigned { get; set; } // IsAssigned
        public bool? IsActive { get; set; } // IsActive
    }

    // CoreTeamLeader
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class CoreTeamLeader
    {
        public int CoreTeamLeaderId { get; set; } // CoreTeamLeaderId (Primary key)
        public int? CoreUserId { get; set; } // CoreUserId
        public int? CoreProvinceId { get; set; } // CoreProvinceId
        public bool? IsActive { get; set; } // IsActive
        public int? ProvinceId { get; set; } // ProvinceId
    }

    // CoreUser
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class CoreUser
    {
        public int CoreUserId { get; set; } // CoreUserId (Primary key)
        public string FirstName { get; set; } // FirstName
        public string MiddleName { get; set; } // MiddleName
        public string LastName { get; set; } // LastName
        public string IdNumber { get; set; } // IDNumber (length: 13)
        public string PhoneNumber { get; set; } // PhoneNumber (length: 10)
        public string CellPhone { get; set; } // CellPhone (length: 10)
        public string EmailAddress { get; set; } // EmailAddress
        public int? GenderId { get; set; } // GenderId
        public int? CreatedBy { get; set; } // CreatedBy
        public System.DateTime? CreatedDate { get; set; } // CreatedDate
        public System.DateTime? LastUpdatedDate { get; set; } // LastUpdatedDate
        public bool? IsActive { get; set; } // IsActive
    }

    // CoreUserInType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class CoreUserInType
    {
        public int CoreUserInTypeId { get; set; } // CoreUserInTypeId (Primary key)
        public int CoreUserId { get; set; } // CoreUserId
        public int CoreUserTypeId { get; set; } // CoreUserTypeId
        public bool? IsUserTypeActive { get; set; } // IsUserTypeActive
    }

    // CoreUserType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class CoreUserType
    {
        public int CoreUserTypeId { get; set; } // CoreUserTypeId (Primary key)
        public string UserTypeName { get; set; } // UserTypeName
        public string UserRoleId { get; set; } // UserRoleId
        public bool? IsActive { get; set; } // IsActive
    }

    // MessengerCoreLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class MessengerCoreLog
    {
        public int MessengerCoreLogId { get; set; } // MessengerCoreLogId (Primary key)
        public int MessenegerTypeId { get; set; } // MessenegerTypeId
        public string MessageFrom { get; set; } // MessageFrom (length: 255)
        public string MessageTo { get; set; } // MessageTo (length: 255)
        public string MessageSubject { get; set; } // MessageSubject (length: 200)
        public string MessageBody { get; set; } // MessageBody
        public bool IsHtml { get; set; } // IsHTML
        public System.DateTime DateCreated { get; set; } // DateCreated
        public System.DateTime? DateSent { get; set; } // DateSent
        public string MessengerResponse { get; set; } // MessengerResponse (length: 255)
        public bool? IsSent { get; set; } // IsSent
    }

    // MessengerType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class MessengerType
    {
        public int MessengerTypeId { get; set; } // MessengerTypeId (Primary key)
        public string MessageType { get; set; } // MessageType (length: 55)
        public bool IsActive { get; set; } // IsActive
    }

    // PropertyFeature
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class PropertyFeature
    {
        public int PropertyFeatureId { get; set; } // PropertyFeatureId (Primary key)
        public string FeatureName { get; set; } // FeatureName (Primary key) (length: 255)
        public bool IsFeatureActive { get; set; } // IsFeatureActive (Primary key)
    }

    // PropertyImages
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class PropertyImage
    {
        public int PropertyImagesId { get; set; } // PropertyImagesId (Primary key)
        public int PropertyListingId { get; set; } // PropertyListingId
        public int BlobId { get; set; } // BlobId
        public bool IsActive { get; set; } // IsActive
    }

    // PropertyListing
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class PropertyListing
    {
        public int PropertyListingId { get; set; } // PropertyListingId (Primary key)
        public int PropertyTypeId { get; set; } // PropertyTypeId
        public int BranchId { get; set; } // BranchId
        public int ProvinceId { get; set; } // ProvinceId
        public string FriendlyName { get; set; } // FriendlyName (length: 255)
        public decimal Price { get; set; } // Price
        public bool IsPricePerAMonth { get; set; } // IsPricePerAMonth
        public bool IsPriceCash { get; set; } // IsPriceCash
        public bool IsPricePerAMeter { get; set; } // IsPricePerAMeter
        public System.DateTime ListingDate { get; set; } // ListingDate
        public System.DateTime LastUpdate { get; set; } // LastUpdate
        public string ProprtyDesciption { get; set; } // ProprtyDesciption
        public bool IsListingActive { get; set; } // IsListingActive
    }

    // PropertyListingAgents
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class PropertyListingAgent
    {
        public int PropertyListingAgentsId { get; set; } // PropertyListingAgentsId (Primary key)
        public int PropertyListingId { get; set; } // PropertyListingId
        public int AgentId { get; set; } // AgentId
        public bool IsActive { get; set; } // IsActive
    }

    // PropertyListingDetail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class PropertyListingDetail
    {
        public int PropertyListingDetailId { get; set; } // PropertyListingDetailId (Primary key)
        public int PropertyListingId { get; set; } // PropertyListingId (Primary key)
        public decimal? NumberOfBathRooms { get; set; } // NumberOfBathRooms
        public decimal? NumberOfBedrooms { get; set; } // NumberOfBedrooms
        public int? NumberOfGarages { get; set; } // NumberOfGarages
        public int? NumberOfSquareMeters { get; set; } // NumberOfSquareMeters
        public decimal? RatesAndTaxes { get; set; } // RatesAndTaxes
    }

    // PropertyType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class PropertyType
    {
        public int PropertyTypeId { get; set; } // PropertyTypeId (Primary key)
        public string TypeName { get; set; } // TypeName (Primary key) (length: 200)
        public bool IsActive { get; set; } // IsActive (Primary key)
    }

    // ProprtyListingFeatures
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class ProprtyListingFeature
    {
        public int ProprtyListingFeaturesId { get; set; } // ProprtyListingFeaturesId (Primary key)
        public int PropertyFeatureId { get; set; } // PropertyFeatureId (Primary key)
        public int PropertyListingId { get; set; } // PropertyListingId (Primary key)
        public bool IsFeatureActive { get; set; } // IsFeatureActive (Primary key)
    }

    // ProprtyListingYoutubeLibrary
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class ProprtyListingYoutubeLibrary
    {
        public int ProprtyListingYoutubeLibraryId { get; set; } // ProprtyListingYoutubeLibraryId (Primary key)
        public int PrfoprtyListingId { get; set; } // PrfoprtyListingId (Primary key)
        public string YoutubeVideoLink { get; set; } // YoutubeVideoLink (Primary key)
        public bool IsVideoActive { get; set; } // IsVideoActive (Primary key)
    }

    // SystemEditLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class SystemEditLog
    {
        public int SystemEditLogId { get; set; } // SystemEditLogId (Primary key)
        public string TableName { get; set; } // TableName (length: 255)
        public string TableColumn { get; set; } // TableColumn (length: 255)
        public int? TablePrimaryKey { get; set; } // TablePrimaryKey
        public string ValueBefore { get; set; } // ValueBefore (length: 255)
        public string ValueAfter { get; set; } // ValueAfter (length: 255)
        public System.DateTime? ChangeDate { get; set; } // ChangeDate
        public int? CoreUserId { get; set; } // CoreUserId
        public string Comment { get; set; } // Comment
    }

    // SystemErrorLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class SystemErrorLog
    {
        public int SystemErrorLogId { get; set; } // SystemErrorLogId (Primary key)
        public string SystemErrorMessage { get; set; } // SystemErrorMessage
        public string StackTrace { get; set; } // StackTrace
        public System.DateTime? ErrorDateTime { get; set; } // ErrorDateTime
        public string Source { get; set; } // Source
        public int? CoreUserId { get; set; } // CoreUserId
    }

    // SystemSettingsData
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class SystemSettingsData
    {
        public int SystemSettingsDataId { get; set; } // SystemSettingsDataId (Primary key)
        public string SettingName { get; set; } // SettingName (length: 255)
        public string SettingValueA { get; set; } // SettingValueA
        public string SettingValueB { get; set; } // SettingValueB
        public string SettingValueC { get; set; } // SettingValueC
        public bool IsActive { get; set; } // IsActive
    }

    // vw_GetAgentsInformation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class VwGetAgentsInformation
    {
        public string FirstName { get; set; } // FirstName
        public string LastName { get; set; } // LastName
        public string MiddleName { get; set; } // MiddleName
        public string IdNumber { get; set; } // IDNumber (length: 13)
        public string PhoneNumber { get; set; } // PhoneNumber (length: 10)
        public string CellPhone { get; set; } // CellPhone (length: 10)
        public string EmailAddress { get; set; } // EmailAddress
        public int? GenderId { get; set; } // GenderId
        public int CoreUserId { get; set; } // CoreUserId (Primary key)
        public int CoreAgentId { get; set; } // CoreAgentId (Primary key)
        public int? CoreTeamLeaderId { get; set; } // CoreTeamLeaderId
        public string TeamLeadername { get; set; } // TeamLeadername
        public int BranchId { get; set; } // BranchId (Primary key)
        public string BranchName { get; set; } // BranchName
        public int ProvinceId { get; set; } // ProvinceId (Primary key)
        public string ProvinceName { get; set; } // ProvinceName
    }

    // vw_GetTeamLeadersInformation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class VwGetTeamLeadersInformation
    {
        public string EmailAddress { get; set; } // EmailAddress
        public string FirstName { get; set; } // FirstName
        public string LastName { get; set; } // LastName
        public int CoreUserId { get; set; } // CoreUserId (Primary key)
        public int CoreTeamLeaderId { get; set; } // CoreTeamLeaderId (Primary key)
        public string ProvinceName { get; set; } // ProvinceName
        public string BranchName { get; set; } // BranchName
        public int BranchId { get; set; } // BranchId (Primary key)
        public int ProvinceId { get; set; } // ProvinceId (Primary key)
    }

    #endregion

    #region POCO Configuration

    // AspNetRoles
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class AspNetRoleConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AspNetRole>
    {
        public AspNetRoleConfiguration()
            : this("dbo")
        {
        }

        public AspNetRoleConfiguration(string schema)
        {
            ToTable("AspNetRoles", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("nvarchar").IsRequired().HasMaxLength(128).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(256);
        }
    }

    // AspNetUsers
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class AspNetUserConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AspNetUser>
    {
        public AspNetUserConfiguration()
            : this("dbo")
        {
        }

        public AspNetUserConfiguration(string schema)
        {
            ToTable("AspNetUsers", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("nvarchar").IsRequired().HasMaxLength(128).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar").IsOptional().HasMaxLength(256);
            Property(x => x.EmailConfirmed).HasColumnName(@"EmailConfirmed").HasColumnType("bit").IsRequired();
            Property(x => x.PasswordHash).HasColumnName(@"PasswordHash").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.SecurityStamp).HasColumnName(@"SecurityStamp").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.PhoneNumber).HasColumnName(@"PhoneNumber").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.PhoneNumberConfirmed).HasColumnName(@"PhoneNumberConfirmed").HasColumnType("bit").IsRequired();
            Property(x => x.TwoFactorEnabled).HasColumnName(@"TwoFactorEnabled").HasColumnType("bit").IsRequired();
            Property(x => x.LockoutEndDateUtc).HasColumnName(@"LockoutEndDateUtc").HasColumnType("datetime").IsOptional();
            Property(x => x.LockoutEnabled).HasColumnName(@"LockoutEnabled").HasColumnType("bit").IsRequired();
            Property(x => x.AccessFailedCount).HasColumnName(@"AccessFailedCount").HasColumnType("int").IsRequired();
            Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar").IsRequired().HasMaxLength(256);
        }
    }

    // AspNetUserClaims
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class AspNetUserClaimConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AspNetUserClaim>
    {
        public AspNetUserClaimConfiguration()
            : this("dbo")
        {
        }

        public AspNetUserClaimConfiguration(string schema)
        {
            ToTable("AspNetUserClaims", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("nvarchar").IsRequired().HasMaxLength(128);
            Property(x => x.ClaimType).HasColumnName(@"ClaimType").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.ClaimValue).HasColumnName(@"ClaimValue").HasColumnType("nvarchar(max)").IsOptional();
        }
    }

    // AspNetUserLogins
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class AspNetUserLoginConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AspNetUserLogin>
    {
        public AspNetUserLoginConfiguration()
            : this("dbo")
        {
        }

        public AspNetUserLoginConfiguration(string schema)
        {
            ToTable("AspNetUserLogins", schema);
            HasKey(x => new { x.LoginProvider, x.ProviderKey, x.UserId });

            Property(x => x.LoginProvider).HasColumnName(@"LoginProvider").HasColumnType("nvarchar").IsRequired().HasMaxLength(128).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProviderKey).HasColumnName(@"ProviderKey").HasColumnType("nvarchar").IsRequired().HasMaxLength(128).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("nvarchar").IsRequired().HasMaxLength(128).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // AspNetUserRoles
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class AspNetUserRoleConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AspNetUserRole>
    {
        public AspNetUserRoleConfiguration()
            : this("dbo")
        {
        }

        public AspNetUserRoleConfiguration(string schema)
        {
            ToTable("AspNetUserRoles", schema);
            HasKey(x => new { x.UserId, x.RoleId });

            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("nvarchar").IsRequired().HasMaxLength(128).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RoleId).HasColumnName(@"RoleId").HasColumnType("nvarchar").IsRequired().HasMaxLength(128).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // AzureWebJob
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class AzureWebJobConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AzureWebJob>
    {
        public AzureWebJobConfiguration()
            : this("dbo")
        {
        }

        public AzureWebJobConfiguration(string schema)
        {
            ToTable("AzureWebJob", schema);
            HasKey(x => x.AzureWebJobId);

            Property(x => x.AzureWebJobId).HasColumnName(@"AzureWebJobId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.WebJobName).HasColumnName(@"WebJobName").HasColumnType("nvarchar").IsRequired().HasMaxLength(100);
        }
    }

    // AzureWebJobLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class AzureWebJobLogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AzureWebJobLog>
    {
        public AzureWebJobLogConfiguration()
            : this("dbo")
        {
        }

        public AzureWebJobLogConfiguration(string schema)
        {
            ToTable("AzureWebJobLog", schema);
            HasKey(x => x.AzureWebJobLogId);

            Property(x => x.AzureWebJobLogId).HasColumnName(@"AzureWebJobLogId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.AzureWebJobId).HasColumnName(@"AzureWebJobId").HasColumnType("nvarchar").IsRequired().HasMaxLength(100);
            Property(x => x.StartDateTime).HasColumnName(@"StartDateTime").HasColumnType("datetime").IsRequired();
            Property(x => x.EndDateTime).HasColumnName(@"EndDateTime").HasColumnType("datetime").IsRequired();
            Property(x => x.RecordsAffected).HasColumnName(@"RecordsAffected").HasColumnType("nvarchar").IsRequired().HasMaxLength(1);
        }
    }

    // BlobCoreStorage
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class BlobCoreStorageConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<BlobCoreStorage>
    {
        public BlobCoreStorageConfiguration()
            : this("dbo")
        {
        }

        public BlobCoreStorageConfiguration(string schema)
        {
            ToTable("BlobCoreStorage", schema);
            HasKey(x => x.BlobId);

            Property(x => x.BlobId).HasColumnName(@"BlobId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.BlobType).HasColumnName(@"BlobType").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(100);
            Property(x => x.BlobFileType).HasColumnName(@"BlobFileType").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(100);
            Property(x => x.BlobFileName).HasColumnName(@"BlobFileName").HasColumnType("nvarchar(max)").IsRequired();
            Property(x => x.BlobFileExtension).HasColumnName(@"BlobFileExtension").HasColumnType("nvarchar(max)").IsRequired();
            Property(x => x.BlobFileSize).HasColumnName(@"BlobFileSize").HasColumnType("int").IsRequired();
            Property(x => x.BlobUrl).HasColumnName(@"BlobUrl").HasColumnType("nvarchar(max)").IsRequired();
            Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
        }
    }

    // CoreAgent
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class CoreAgentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CoreAgent>
    {
        public CoreAgentConfiguration()
            : this("dbo")
        {
        }

        public CoreAgentConfiguration(string schema)
        {
            ToTable("CoreAgent", schema);
            HasKey(x => x.CoreAgentId);

            Property(x => x.CoreAgentId).HasColumnName(@"CoreAgentId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CoreBranchId).HasColumnName(@"CoreBranchId").HasColumnType("int").IsOptional();
            Property(x => x.CoreUserId).HasColumnName(@"CoreUserId").HasColumnType("int").IsOptional();
            Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsOptional();
        }
    }

    // CoreBranch
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class CoreBranchConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CoreBranch>
    {
        public CoreBranchConfiguration()
            : this("dbo")
        {
        }

        public CoreBranchConfiguration(string schema)
        {
            ToTable("CoreBranch", schema);
            HasKey(x => x.BranchId);

            Property(x => x.BranchId).HasColumnName(@"BranchId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CoreTeamLeaderId).HasColumnName(@"CoreTeamLeaderId").HasColumnType("int").IsOptional();
            Property(x => x.ProvinceId).HasColumnName(@"ProvinceId").HasColumnType("int").IsOptional();
            Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsOptional();
            Property(x => x.BranchName).HasColumnName(@"BranchName").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Phone).HasColumnName(@"Phone").HasColumnType("nchar").IsOptional().IsFixedLength().HasMaxLength(10);
            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.StreetAddress).HasColumnName(@"StreetAddress").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.City).HasColumnName(@"City").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Suburb).HasColumnName(@"Suburb").HasColumnType("nvarchar(max)").IsOptional();
        }
    }

    // CorePA
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class CorePaConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CorePa>
    {
        public CorePaConfiguration()
            : this("dbo")
        {
        }

        public CorePaConfiguration(string schema)
        {
            ToTable("CorePA", schema);
            HasKey(x => x.CorePaId);

            Property(x => x.CorePaId).HasColumnName(@"CorePAId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CoreUserId).HasColumnName(@"CoreUserId").HasColumnType("int").IsOptional();
            Property(x => x.ProvinceId).HasColumnName(@"ProvinceId").HasColumnType("int").IsOptional();
            Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsOptional();
        }
    }

    // CoreProvince
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class CoreProvinceConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CoreProvince>
    {
        public CoreProvinceConfiguration()
            : this("dbo")
        {
        }

        public CoreProvinceConfiguration(string schema)
        {
            ToTable("CoreProvince", schema);
            HasKey(x => x.ProvinceId);

            Property(x => x.ProvinceId).HasColumnName(@"ProvinceId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ProvinceName).HasColumnName(@"ProvinceName").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.IsAssigned).HasColumnName(@"IsAssigned").HasColumnType("bit").IsOptional();
            Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsOptional();
        }
    }

    // CoreTeamLeader
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class CoreTeamLeaderConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CoreTeamLeader>
    {
        public CoreTeamLeaderConfiguration()
            : this("dbo")
        {
        }

        public CoreTeamLeaderConfiguration(string schema)
        {
            ToTable("CoreTeamLeader", schema);
            HasKey(x => x.CoreTeamLeaderId);

            Property(x => x.CoreTeamLeaderId).HasColumnName(@"CoreTeamLeaderId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CoreUserId).HasColumnName(@"CoreUserId").HasColumnType("int").IsOptional();
            Property(x => x.CoreProvinceId).HasColumnName(@"CoreProvinceId").HasColumnType("int").IsOptional();
            Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsOptional();
            Property(x => x.ProvinceId).HasColumnName(@"ProvinceId").HasColumnType("int").IsOptional();
        }
    }

    // CoreUser
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class CoreUserConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CoreUser>
    {
        public CoreUserConfiguration()
            : this("dbo")
        {
        }

        public CoreUserConfiguration(string schema)
        {
            ToTable("CoreUser", schema);
            HasKey(x => x.CoreUserId);

            Property(x => x.CoreUserId).HasColumnName(@"CoreUserId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.MiddleName).HasColumnName(@"MiddleName").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.LastName).HasColumnName(@"LastName").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.IdNumber).HasColumnName(@"IDNumber").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(13);
            Property(x => x.PhoneNumber).HasColumnName(@"PhoneNumber").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(10);
            Property(x => x.CellPhone).HasColumnName(@"CellPhone").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(10);
            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.GenderId).HasColumnName(@"GenderId").HasColumnType("int").IsOptional();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("int").IsOptional();
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.LastUpdatedDate).HasColumnName(@"LastUpdatedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsOptional();
        }
    }

    // CoreUserInType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class CoreUserInTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CoreUserInType>
    {
        public CoreUserInTypeConfiguration()
            : this("dbo")
        {
        }

        public CoreUserInTypeConfiguration(string schema)
        {
            ToTable("CoreUserInType", schema);
            HasKey(x => x.CoreUserInTypeId);

            Property(x => x.CoreUserInTypeId).HasColumnName(@"CoreUserInTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CoreUserId).HasColumnName(@"CoreUserId").HasColumnType("int").IsRequired();
            Property(x => x.CoreUserTypeId).HasColumnName(@"CoreUserTypeId").HasColumnType("int").IsRequired();
            Property(x => x.IsUserTypeActive).HasColumnName(@"IsUserTypeActive").HasColumnType("bit").IsOptional();
        }
    }

    // CoreUserType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class CoreUserTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CoreUserType>
    {
        public CoreUserTypeConfiguration()
            : this("dbo")
        {
        }

        public CoreUserTypeConfiguration(string schema)
        {
            ToTable("CoreUserType", schema);
            HasKey(x => x.CoreUserTypeId);

            Property(x => x.CoreUserTypeId).HasColumnName(@"CoreUserTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.UserTypeName).HasColumnName(@"UserTypeName").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.UserRoleId).HasColumnName(@"UserRoleId").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsOptional();
        }
    }

    // MessengerCoreLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class MessengerCoreLogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<MessengerCoreLog>
    {
        public MessengerCoreLogConfiguration()
            : this("dbo")
        {
        }

        public MessengerCoreLogConfiguration(string schema)
        {
            ToTable("MessengerCoreLog", schema);
            HasKey(x => x.MessengerCoreLogId);

            Property(x => x.MessengerCoreLogId).HasColumnName(@"MessengerCoreLogId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.MessenegerTypeId).HasColumnName(@"MessenegerTypeId").HasColumnType("int").IsRequired();
            Property(x => x.MessageFrom).HasColumnName(@"MessageFrom").HasColumnType("nvarchar").IsRequired().HasMaxLength(255);
            Property(x => x.MessageTo).HasColumnName(@"MessageTo").HasColumnType("nvarchar").IsRequired().HasMaxLength(255);
            Property(x => x.MessageSubject).HasColumnName(@"MessageSubject").HasColumnType("nvarchar").IsRequired().HasMaxLength(200);
            Property(x => x.MessageBody).HasColumnName(@"MessageBody").HasColumnType("nvarchar(max)").IsRequired();
            Property(x => x.IsHtml).HasColumnName(@"IsHTML").HasColumnType("bit").IsRequired();
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").HasColumnType("datetime").IsRequired();
            Property(x => x.DateSent).HasColumnName(@"DateSent").HasColumnType("datetime").IsOptional();
            Property(x => x.MessengerResponse).HasColumnName(@"MessengerResponse").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.IsSent).HasColumnName(@"IsSent").HasColumnType("bit").IsOptional();
        }
    }

    // MessengerType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class MessengerTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<MessengerType>
    {
        public MessengerTypeConfiguration()
            : this("dbo")
        {
        }

        public MessengerTypeConfiguration(string schema)
        {
            ToTable("MessengerType", schema);
            HasKey(x => x.MessengerTypeId);

            Property(x => x.MessengerTypeId).HasColumnName(@"MessengerTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.MessageType).HasColumnName(@"MessageType").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(55);
            Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
        }
    }

    // PropertyFeature
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class PropertyFeatureConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PropertyFeature>
    {
        public PropertyFeatureConfiguration()
            : this("dbo")
        {
        }

        public PropertyFeatureConfiguration(string schema)
        {
            ToTable("PropertyFeature", schema);
            HasKey(x => new { x.PropertyFeatureId, x.FeatureName, x.IsFeatureActive });

            Property(x => x.PropertyFeatureId).HasColumnName(@"PropertyFeatureId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.FeatureName).HasColumnName(@"FeatureName").HasColumnType("nvarchar").IsRequired().HasMaxLength(255).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IsFeatureActive).HasColumnName(@"IsFeatureActive").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // PropertyImages
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class PropertyImageConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PropertyImage>
    {
        public PropertyImageConfiguration()
            : this("dbo")
        {
        }

        public PropertyImageConfiguration(string schema)
        {
            ToTable("PropertyImages", schema);
            HasKey(x => x.PropertyImagesId);

            Property(x => x.PropertyImagesId).HasColumnName(@"PropertyImagesId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.PropertyListingId).HasColumnName(@"PropertyListingId").HasColumnType("int").IsRequired();
            Property(x => x.BlobId).HasColumnName(@"BlobId").HasColumnType("int").IsRequired();
            Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
        }
    }

    // PropertyListing
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class PropertyListingConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PropertyListing>
    {
        public PropertyListingConfiguration()
            : this("dbo")
        {
        }

        public PropertyListingConfiguration(string schema)
        {
            ToTable("PropertyListing", schema);
            HasKey(x => x.PropertyListingId);

            Property(x => x.PropertyListingId).HasColumnName(@"PropertyListingId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.PropertyTypeId).HasColumnName(@"PropertyTypeId").HasColumnType("int").IsRequired();
            Property(x => x.BranchId).HasColumnName(@"BranchId").HasColumnType("int").IsRequired();
            Property(x => x.ProvinceId).HasColumnName(@"ProvinceId").HasColumnType("int").IsRequired();
            Property(x => x.FriendlyName).HasColumnName(@"FriendlyName").HasColumnType("nvarchar").IsRequired().HasMaxLength(255);
            Property(x => x.Price).HasColumnName(@"Price").HasColumnType("decimal").IsRequired().HasPrecision(18,0);
            Property(x => x.IsPricePerAMonth).HasColumnName(@"IsPricePerAMonth").HasColumnType("bit").IsRequired();
            Property(x => x.IsPriceCash).HasColumnName(@"IsPriceCash").HasColumnType("bit").IsRequired();
            Property(x => x.IsPricePerAMeter).HasColumnName(@"IsPricePerAMeter").HasColumnType("bit").IsRequired();
            Property(x => x.ListingDate).HasColumnName(@"ListingDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastUpdate).HasColumnName(@"LastUpdate").HasColumnType("datetime").IsRequired();
            Property(x => x.ProprtyDesciption).HasColumnName(@"ProprtyDesciption").HasColumnType("nvarchar(max)").IsRequired();
            Property(x => x.IsListingActive).HasColumnName(@"IsListingActive").HasColumnType("bit").IsRequired();
        }
    }

    // PropertyListingAgents
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class PropertyListingAgentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PropertyListingAgent>
    {
        public PropertyListingAgentConfiguration()
            : this("dbo")
        {
        }

        public PropertyListingAgentConfiguration(string schema)
        {
            ToTable("PropertyListingAgents", schema);
            HasKey(x => x.PropertyListingAgentsId);

            Property(x => x.PropertyListingAgentsId).HasColumnName(@"PropertyListingAgentsId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.PropertyListingId).HasColumnName(@"PropertyListingId").HasColumnType("int").IsRequired();
            Property(x => x.AgentId).HasColumnName(@"AgentId").HasColumnType("int").IsRequired();
            Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
        }
    }

    // PropertyListingDetail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class PropertyListingDetailConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PropertyListingDetail>
    {
        public PropertyListingDetailConfiguration()
            : this("dbo")
        {
        }

        public PropertyListingDetailConfiguration(string schema)
        {
            ToTable("PropertyListingDetail", schema);
            HasKey(x => new { x.PropertyListingDetailId, x.PropertyListingId });

            Property(x => x.PropertyListingDetailId).HasColumnName(@"PropertyListingDetailId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.PropertyListingId).HasColumnName(@"PropertyListingId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.NumberOfBathRooms).HasColumnName(@"NumberOfBathRooms").HasColumnType("decimal").IsOptional().HasPrecision(18,0);
            Property(x => x.NumberOfBedrooms).HasColumnName(@"NumberOfBedrooms").HasColumnType("decimal").IsOptional().HasPrecision(18,0);
            Property(x => x.NumberOfGarages).HasColumnName(@"NumberOfGarages").HasColumnType("int").IsOptional();
            Property(x => x.NumberOfSquareMeters).HasColumnName(@"NumberOfSquareMeters").HasColumnType("int").IsOptional();
            Property(x => x.RatesAndTaxes).HasColumnName(@"RatesAndTaxes").HasColumnType("decimal").IsOptional().HasPrecision(18,0);
        }
    }

    // PropertyType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class PropertyTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PropertyType>
    {
        public PropertyTypeConfiguration()
            : this("dbo")
        {
        }

        public PropertyTypeConfiguration(string schema)
        {
            ToTable("PropertyType", schema);
            HasKey(x => new { x.PropertyTypeId, x.TypeName, x.IsActive });

            Property(x => x.PropertyTypeId).HasColumnName(@"PropertyTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.TypeName).HasColumnName(@"TypeName").HasColumnType("nvarchar").IsRequired().HasMaxLength(200).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // ProprtyListingFeatures
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class ProprtyListingFeatureConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ProprtyListingFeature>
    {
        public ProprtyListingFeatureConfiguration()
            : this("dbo")
        {
        }

        public ProprtyListingFeatureConfiguration(string schema)
        {
            ToTable("ProprtyListingFeatures", schema);
            HasKey(x => new { x.ProprtyListingFeaturesId, x.PropertyFeatureId, x.PropertyListingId, x.IsFeatureActive });

            Property(x => x.ProprtyListingFeaturesId).HasColumnName(@"ProprtyListingFeaturesId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.PropertyFeatureId).HasColumnName(@"PropertyFeatureId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PropertyListingId).HasColumnName(@"PropertyListingId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IsFeatureActive).HasColumnName(@"IsFeatureActive").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // ProprtyListingYoutubeLibrary
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class ProprtyListingYoutubeLibraryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ProprtyListingYoutubeLibrary>
    {
        public ProprtyListingYoutubeLibraryConfiguration()
            : this("dbo")
        {
        }

        public ProprtyListingYoutubeLibraryConfiguration(string schema)
        {
            ToTable("ProprtyListingYoutubeLibrary", schema);
            HasKey(x => new { x.ProprtyListingYoutubeLibraryId, x.PrfoprtyListingId, x.YoutubeVideoLink, x.IsVideoActive });

            Property(x => x.ProprtyListingYoutubeLibraryId).HasColumnName(@"ProprtyListingYoutubeLibraryId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.PrfoprtyListingId).HasColumnName(@"PrfoprtyListingId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.YoutubeVideoLink).HasColumnName(@"YoutubeVideoLink").HasColumnType("nvarchar(max)").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IsVideoActive).HasColumnName(@"IsVideoActive").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // SystemEditLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class SystemEditLogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SystemEditLog>
    {
        public SystemEditLogConfiguration()
            : this("dbo")
        {
        }

        public SystemEditLogConfiguration(string schema)
        {
            ToTable("SystemEditLog", schema);
            HasKey(x => x.SystemEditLogId);

            Property(x => x.SystemEditLogId).HasColumnName(@"SystemEditLogId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.TableName).HasColumnName(@"TableName").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.TableColumn).HasColumnName(@"TableColumn").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.TablePrimaryKey).HasColumnName(@"TablePrimaryKey").HasColumnType("int").IsOptional();
            Property(x => x.ValueBefore).HasColumnName(@"ValueBefore").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.ValueAfter).HasColumnName(@"ValueAfter").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.ChangeDate).HasColumnName(@"ChangeDate").HasColumnType("datetime").IsOptional();
            Property(x => x.CoreUserId).HasColumnName(@"CoreUserId").HasColumnType("int").IsOptional();
            Property(x => x.Comment).HasColumnName(@"Comment").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
        }
    }

    // SystemErrorLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class SystemErrorLogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SystemErrorLog>
    {
        public SystemErrorLogConfiguration()
            : this("dbo")
        {
        }

        public SystemErrorLogConfiguration(string schema)
        {
            ToTable("SystemErrorLog", schema);
            HasKey(x => x.SystemErrorLogId);

            Property(x => x.SystemErrorLogId).HasColumnName(@"SystemErrorLogId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.SystemErrorMessage).HasColumnName(@"SystemErrorMessage").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.StackTrace).HasColumnName(@"StackTrace").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.ErrorDateTime).HasColumnName(@"ErrorDateTime").HasColumnType("datetime").IsOptional();
            Property(x => x.Source).HasColumnName(@"Source").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.CoreUserId).HasColumnName(@"CoreUserId").HasColumnType("int").IsOptional();
        }
    }

    // SystemSettingsData
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class SystemSettingsDataConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SystemSettingsData>
    {
        public SystemSettingsDataConfiguration()
            : this("dbo")
        {
        }

        public SystemSettingsDataConfiguration(string schema)
        {
            ToTable("SystemSettingsData", schema);
            HasKey(x => x.SystemSettingsDataId);

            Property(x => x.SystemSettingsDataId).HasColumnName(@"SystemSettingsDataId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.SettingName).HasColumnName(@"SettingName").HasColumnType("nvarchar").IsRequired().HasMaxLength(255);
            Property(x => x.SettingValueA).HasColumnName(@"SettingValueA").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.SettingValueB).HasColumnName(@"SettingValueB").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.SettingValueC).HasColumnName(@"SettingValueC").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
        }
    }

    // vw_GetAgentsInformation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class VwGetAgentsInformationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VwGetAgentsInformation>
    {
        public VwGetAgentsInformationConfiguration()
            : this("dbo")
        {
        }

        public VwGetAgentsInformationConfiguration(string schema)
        {
            ToTable("vw_GetAgentsInformation", schema);
            HasKey(x => new { x.CoreUserId, x.CoreAgentId, x.BranchId, x.ProvinceId });

            Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.LastName).HasColumnName(@"LastName").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.MiddleName).HasColumnName(@"MiddleName").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.IdNumber).HasColumnName(@"IDNumber").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(13);
            Property(x => x.PhoneNumber).HasColumnName(@"PhoneNumber").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(10);
            Property(x => x.CellPhone).HasColumnName(@"CellPhone").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(10);
            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.GenderId).HasColumnName(@"GenderId").HasColumnType("int").IsOptional();
            Property(x => x.CoreUserId).HasColumnName(@"CoreUserId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CoreAgentId).HasColumnName(@"CoreAgentId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CoreTeamLeaderId).HasColumnName(@"CoreTeamLeaderId").HasColumnType("int").IsOptional();
            Property(x => x.TeamLeadername).HasColumnName(@"TeamLeadername").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.BranchId).HasColumnName(@"BranchId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BranchName).HasColumnName(@"BranchName").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.ProvinceId).HasColumnName(@"ProvinceId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProvinceName).HasColumnName(@"ProvinceName").HasColumnType("nvarchar(max)").IsOptional();
        }
    }

    // vw_GetTeamLeadersInformation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class VwGetTeamLeadersInformationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VwGetTeamLeadersInformation>
    {
        public VwGetTeamLeadersInformationConfiguration()
            : this("dbo")
        {
        }

        public VwGetTeamLeadersInformationConfiguration(string schema)
        {
            ToTable("vw_GetTeamLeadersInformation", schema);
            HasKey(x => new { x.CoreUserId, x.CoreTeamLeaderId, x.BranchId, x.ProvinceId });

            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.LastName).HasColumnName(@"LastName").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.CoreUserId).HasColumnName(@"CoreUserId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CoreTeamLeaderId).HasColumnName(@"CoreTeamLeaderId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProvinceName).HasColumnName(@"ProvinceName").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.BranchName).HasColumnName(@"BranchName").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.BranchId).HasColumnName(@"BranchId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProvinceId).HasColumnName(@"ProvinceId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    #endregion

    #region Stored procedure return models

    #endregion

}
// </auto-generated>

